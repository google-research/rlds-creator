# Copyright 2021 RLDSCreator Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Build targets for RLDS Creator.
load("@com_google_protobuf//:protobuf.bzl", "py_proto_library")
load("@py_deps//:requirements.bzl", "requirement")
load("@rules_proto//proto:defs.bzl", "proto_library")
load("@rules_python//python:defs.bzl", "py_binary", "py_library", "py_test")

package(default_visibility = ["//visibility:public"])

proto_library(
    name = "study_proto",
    srcs = ["study.proto"],
    deps = [
        "@com_google_protobuf//:struct_proto",
        "@com_google_protobuf//:timestamp_proto",
    ],
)

py_proto_library(
    name = "study_py_proto",
    srcs = ["study.proto"],
    visibility = ["//visibility:public"],
    deps = ["@com_google_protobuf//:protobuf_python"],
)

proto_library(
    name = "client_proto",
    srcs = ["client.proto"],
    deps = [":study_proto"],
)

py_proto_library(
    name = "client_py_proto",
    srcs = ["client.proto"],
    visibility = ["//visibility:public"],
    deps = [
        ":study_py_proto",
        "@com_google_protobuf//:protobuf_python",
    ],
)

py_library(
    name = "camera_observation_wrapper",
    srcs = ["camera_observation_wrapper.py"],
    srcs_version = "PY3",
    deps = [
        ":environment",
        ":environment_wrapper",
        requirement("dm_env"),
    ],
)

py_library(
    name = "constants",
    srcs = ["constants.py"],
    srcs_version = "PY3",
)

py_library(
    name = "config",
    srcs = ["config.py"],
    srcs_version = "PY3",
    deps = [
        requirement("procgen"),
        requirement("robosuite"),
    ],
)

py_library(
    name = "episode_storage",
    srcs = ["episode_storage.py"],
    srcs_version = "PY3",
    deps = [
        ":environment",
        ":study_py_proto",
    ],
)

py_library(
    name = "episode_storage_factory",
    srcs = ["episode_storage_factory.py"],
    srcs_version = "PY3",
    deps = [
        ":environment",
        ":episode_storage",
        ":pickle_episode_storage",
        ":riegeli_episode_storage",
        requirement("absl-py"),
    ],
)

py_library(
    name = "pickle_episode_storage",
    srcs = ["pickle_episode_storage.py"],
    srcs_version = "PY3",
    deps = [
        ":environment",
        ":episode_storage",
        ":file_utils",
    ],
)

py_test(
    name = "pickle_episode_storage_test",
    srcs = ["pickle_episode_storage_test.py"],
    python_version = "PY3",
    deps = [
        ":constants",
        ":pickle_episode_storage",
        ":test_utils",
        requirement("absl-py"),
    ],
)

py_library(
    name = "riegeli_episode_storage",
    srcs = ["riegeli_episode_storage.py"],
    srcs_version = "PY3",
    deps = [
        ":environment",
        ":episode_storage",
        ":file_utils",
        requirement("envlogger"),
    ],
)

py_test(
    name = "riegeli_episode_storage_test",
    srcs = ["riegeli_episode_storage_test.py"],
    python_version = "PY3",
    deps = [
        ":constants",
        ":riegeli_episode_storage",
        ":test_utils",
        requirement("absl-py"),
    ],
)

py_library(
    name = "gym_utils",
    srcs = ["gym_utils.py"],
    srcs_version = "PY3",
    deps = [
        ":environment",
        ":gym_renderer",
        requirement("dm-acme"),
        requirement("gym"),
        requirement("matplotlib"),
    ],
)

py_test(
    name = "gym_utils_test",
    srcs = ["gym_utils_test.py"],
    python_version = "PY3",
    deps = [
        ":environment",
        ":gym_utils",
        requirement("absl-py"),
        requirement("gym"),
        requirement("mock"),
    ],
)

py_library(
    name = "input_utils",
    srcs = ["input_utils.py"],
    srcs_version = "PY3",
    deps = [":environment"],
)

py_test(
    name = "input_utils_test",
    srcs = ["input_utils_test.py"],
    python_version = "PY3",
    deps = [
        ":input_utils",
        requirement("absl-py"),
    ],
)

py_library(
    name = "file_utils",
    srcs = ["file_utils.py"],
    srcs_version = "PY3",
)

py_library(
    name = "utils",
    srcs = ["utils.py"],
    srcs_version = "PY3",
    deps = [
        ":constants",
        ":file_utils",
        ":study_py_proto",
    ],
)

py_test(
    name = "utils_test",
    srcs = ["utils_test.py"],
    python_version = "PY3",
    deps = [
        ":utils",
        requirement("absl-py"),
    ],
)

py_library(
    name = "storage",
    srcs = ["storage.py"],
    srcs_version = "PY3",
    deps = [":study_py_proto"],
)

py_library(
    name = "storage_test_util",
    testonly = 1,
    srcs = ["storage_test_util.py"],
    srcs_version = "PY3",
    deps = [
        ":storage",
        ":study_py_proto",
        requirement("absl-py"),
    ],
)

py_library(
    name = "sqlalchemy_storage",
    srcs = ["sqlalchemy_storage.py"],
    srcs_version = "PY3",
    deps = [
        ":storage",
        ":study_py_proto",
        requirement("absl-py"),
        requirement("sqlalchemy"),
    ],
)

py_test(
    name = "sqlalchemy_storage_test",
    srcs = ["sqlalchemy_storage_test.py"],
    python_version = "PY3",
    deps = [
        ":sqlalchemy_storage",
        ":storage_test_util",
        requirement("absl-py"),
        requirement("sqlalchemy"),
        requirement("db-sqlite3"),
    ],
)

py_library(
    name = "test_utils",
    testonly = 1,
    srcs = ["test_utils.py"],
    srcs_version = "PY3",
    deps = [
        ":environment",
        ":episode_storage",
        ":pickle_episode_storage",
        ":study_py_proto",
        ":utils",
        "//rlds_creator/envs:procgen_env",
    ],
)

py_library(
    name = "renderer",
    srcs = ["renderer.py"],
    srcs_version = "PY3",
    deps = [
        requirement("Pillow"),
        requirement("numpy"),
    ],
)

py_test(
    name = "renderer_test",
    srcs = ["renderer_test.py"],
    python_version = "PY3",
    deps = [
        ":renderer",
        requirement("Pillow"),
        requirement("absl-py"),
        requirement("numpy"),
    ],
)

py_library(
    name = "gym_renderer",
    srcs = ["gym_renderer.py"],
    srcs_version = "PY3",
    deps = [
        ":renderer",
        requirement("gym"),
    ],
)

py_test(
    name = "gym_renderer_test",
    srcs = ["gym_renderer_test.py"],
    python_version = "PY3",
    deps = [
        ":gym_renderer",
        requirement("absl-py"),
        requirement("gym"),
    ],
)

py_library(
    name = "environment",
    srcs = ["environment.py"],
    srcs_version = "PY3",
    deps = [
        requirement("dm_env"),
        requirement("numpy"),
    ],
)

py_library(
    name = "environment_proxy",
    srcs = ["environment_proxy.py"],
    srcs_version = "PY3",
    deps = [
        ":environment",
        ":study_py_proto",
        requirement("absl-py"),
        requirement("dm_env"),
    ],
)

py_test(
    name = "environment_proxy_test",
    srcs = ["environment_proxy_test.py"],
    python_version = "PY3",
    deps = [
        ":environment",
        ":environment_proxy",
        ":study_py_proto",
        "//rlds_creator/envs:procgen_env",
        requirement("absl-py"),
        requirement("gym"),
    ],
)

py_library(
    name = "environment_factory",
    srcs = ["environment_factory.py"],
    srcs_version = "PY3",
    deps = [
        ":environment",
        ":environment_proxy",
        ":study_py_proto",
        "//rlds_creator/envs:atari_env",
        "//rlds_creator/envs:dmlab_env",
        "//rlds_creator/envs:net_hack_env",
        "//rlds_creator/envs:procgen_env",
        "//rlds_creator/envs:robodesk_env",
        "//rlds_creator/envs:robosuite_env",
    ],
)

py_library(
    name = "environment_wrapper",
    srcs = ["environment_wrapper.py"],
    srcs_version = "PY3",
    deps = [requirement("dm_env")],
)

py_library(
    name = "replay",
    srcs = ["replay.py"],
    srcs_version = "PY3",
    deps = [
        ":episode_storage",
        ":storage",
        ":study_py_proto",
        ":utils",
    ],
)

py_test(
    name = "replay_test",
    srcs = ["replay_test.py"],
    python_version = "PY3",
    deps = [
        ":episode_storage_factory",
        ":replay",
        ":storage",
        ":study_py_proto",
        ":test_utils",
        requirement("absl-py"),
        requirement("mock"),
    ],
)

py_library(
    name = "merger",
    srcs = ["merger.py"],
    srcs_version = "PY3",
    deps = [
        ":constants",
        ":episode_storage",
        ":study_py_proto",
        requirement("absl-py"),
        requirement("dm_env"),
    ],
)

py_test(
    name = "merger_test",
    srcs = ["merger_test.py"],
    python_version = "PY3",
    deps = [
        ":episode_storage",
        ":episode_storage_factory",
        ":merger",
        ":pickle_episode_storage",
        ":study_py_proto",
        ":test_utils",
        "//rlds_creator/envs:procgen_env",
        requirement("absl-py"),
        requirement("dm_env"),
        requirement("numpy"),
    ],
)

py_library(
    name = "environment_handler",
    srcs = ["environment_handler.py"],
    srcs_version = "PY3",
    deps = [
        ":client_py_proto",
        ":constants",
        ":environment",
        ":environment_wrapper",
        ":episode_storage",
        ":file_utils",
        ":merger",
        ":replay",
        ":storage",
        ":study_py_proto",
        ":utils",
        requirement("absl-py"),
        requirement("protobuf"),
        requirement("Pillow"),
        requirement("dm_env"),
        requirement("humanize"),
        requirement("numpy"),
        requirement("opencv-python"),
    ],
)

py_test(
    name = "environment_handler_test",
    srcs = ["environment_handler_test.py"],
    python_version = "PY3",
    deps = [
        ":client_py_proto",
        ":constants",
        ":environment",
        ":environment_handler",
        ":episode_storage",
        ":episode_storage_factory",
        ":replay",
        ":storage",
        ":study_py_proto",
        ":test_utils",
        "//rlds_creator/envs:procgen_env",
        requirement("protobuf"),
        requirement("Pillow"),
        requirement("absl-py"),
        requirement("dm_env"),
        requirement("mock"),
        requirement("numpy"),
    ],
)

py_binary(
    name = "server",
    srcs = ["server.py"],
    data = ["//rlds_creator/static"],
    python_version = "PY3",
    srcs_version = "PY3",
    deps = [
        ":client_py_proto",
        ":config",
        ":environment",
        ":environment_factory",
        ":environment_handler",
        ":episode_storage",
        ":episode_storage_factory",
        ":pickle_episode_storage",
        ":sqlalchemy_storage",
        ":study_py_proto",
        requirement("absl-py"),
        requirement("db-sqlite3"),
        requirement("sqlalchemy"),
        requirement("tornado"),
    ],
)
